package com.miaxis.face.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.face.bean.Config;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIG".
*/
public class ConfigDao extends AbstractDao<Config, Long> {

    public static final String TABLENAME = "CONFIG";

    /**
     * Properties of entity Config.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property DeviceSerialNumber = new Property(1, String.class, "deviceSerialNumber", false, "DEVICE_SERIAL_NUMBER");
        public final static Property ClientId = new Property(2, String.class, "clientId", false, "CLIENT_ID");
        public final static Property VerifyMode = new Property(3, int.class, "verifyMode", false, "VERIFY_MODE");
        public final static Property LivenessFlag = new Property(4, boolean.class, "livenessFlag", false, "LIVENESS_FLAG");
        public final static Property QueryFlag = new Property(5, boolean.class, "queryFlag", false, "QUERY_FLAG");
        public final static Property GatherFingerFlag = new Property(6, int.class, "gatherFingerFlag", false, "GATHER_FINGER_FLAG");
        public final static Property VerifyScore = new Property(7, float.class, "verifyScore", false, "VERIFY_SCORE");
        public final static Property QualityScore_new = new Property(8, int.class, "qualityScore_new", false, "QUALITY_SCORE_NEW");
        public final static Property LivenessQualityScore = new Property(9, int.class, "livenessQualityScore", false, "LIVENESS_QUALITY_SCORE");
        public final static Property Password = new Property(10, String.class, "password", false, "PASSWORD");
        public final static Property IntervalTime = new Property(11, int.class, "intervalTime", false, "INTERVAL_TIME");
        public final static Property OrgName = new Property(12, String.class, "orgName", false, "ORG_NAME");
        public final static Property AdvertiseDelayTime = new Property(13, int.class, "advertiseDelayTime", false, "ADVERTISE_DELAY_TIME");
    }


    public ConfigDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"DEVICE_SERIAL_NUMBER\" TEXT," + // 1: deviceSerialNumber
                "\"CLIENT_ID\" TEXT," + // 2: clientId
                "\"VERIFY_MODE\" INTEGER NOT NULL ," + // 3: verifyMode
                "\"LIVENESS_FLAG\" INTEGER NOT NULL ," + // 4: livenessFlag
                "\"QUERY_FLAG\" INTEGER NOT NULL ," + // 5: queryFlag
                "\"GATHER_FINGER_FLAG\" INTEGER NOT NULL ," + // 6: gatherFingerFlag
                "\"VERIFY_SCORE\" REAL NOT NULL ," + // 7: verifyScore
                "\"QUALITY_SCORE_NEW\" INTEGER NOT NULL ," + // 8: qualityScore_new
                "\"LIVENESS_QUALITY_SCORE\" INTEGER NOT NULL ," + // 9: livenessQualityScore
                "\"PASSWORD\" TEXT," + // 10: password
                "\"INTERVAL_TIME\" INTEGER NOT NULL ," + // 11: intervalTime
                "\"ORG_NAME\" TEXT," + // 12: orgName
                "\"ADVERTISE_DELAY_TIME\" INTEGER NOT NULL );"); // 13: advertiseDelayTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Config entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String deviceSerialNumber = entity.getDeviceSerialNumber();
        if (deviceSerialNumber != null) {
            stmt.bindString(2, deviceSerialNumber);
        }
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(3, clientId);
        }
        stmt.bindLong(4, entity.getVerifyMode());
        stmt.bindLong(5, entity.getLivenessFlag() ? 1L: 0L);
        stmt.bindLong(6, entity.getQueryFlag() ? 1L: 0L);
        stmt.bindLong(7, entity.getGatherFingerFlag());
        stmt.bindDouble(8, entity.getVerifyScore());
        stmt.bindLong(9, entity.getQualityScore_new());
        stmt.bindLong(10, entity.getLivenessQualityScore());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(11, password);
        }
        stmt.bindLong(12, entity.getIntervalTime());
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(13, orgName);
        }
        stmt.bindLong(14, entity.getAdvertiseDelayTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Config entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String deviceSerialNumber = entity.getDeviceSerialNumber();
        if (deviceSerialNumber != null) {
            stmt.bindString(2, deviceSerialNumber);
        }
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(3, clientId);
        }
        stmt.bindLong(4, entity.getVerifyMode());
        stmt.bindLong(5, entity.getLivenessFlag() ? 1L: 0L);
        stmt.bindLong(6, entity.getQueryFlag() ? 1L: 0L);
        stmt.bindLong(7, entity.getGatherFingerFlag());
        stmt.bindDouble(8, entity.getVerifyScore());
        stmt.bindLong(9, entity.getQualityScore_new());
        stmt.bindLong(10, entity.getLivenessQualityScore());
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(11, password);
        }
        stmt.bindLong(12, entity.getIntervalTime());
 
        String orgName = entity.getOrgName();
        if (orgName != null) {
            stmt.bindString(13, orgName);
        }
        stmt.bindLong(14, entity.getAdvertiseDelayTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Config readEntity(Cursor cursor, int offset) {
        Config entity = new Config( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceSerialNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // clientId
            cursor.getInt(offset + 3), // verifyMode
            cursor.getShort(offset + 4) != 0, // livenessFlag
            cursor.getShort(offset + 5) != 0, // queryFlag
            cursor.getInt(offset + 6), // gatherFingerFlag
            cursor.getFloat(offset + 7), // verifyScore
            cursor.getInt(offset + 8), // qualityScore_new
            cursor.getInt(offset + 9), // livenessQualityScore
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // password
            cursor.getInt(offset + 11), // intervalTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // orgName
            cursor.getInt(offset + 13) // advertiseDelayTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Config entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setDeviceSerialNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClientId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVerifyMode(cursor.getInt(offset + 3));
        entity.setLivenessFlag(cursor.getShort(offset + 4) != 0);
        entity.setQueryFlag(cursor.getShort(offset + 5) != 0);
        entity.setGatherFingerFlag(cursor.getInt(offset + 6));
        entity.setVerifyScore(cursor.getFloat(offset + 7));
        entity.setQualityScore_new(cursor.getInt(offset + 8));
        entity.setLivenessQualityScore(cursor.getInt(offset + 9));
        entity.setPassword(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIntervalTime(cursor.getInt(offset + 11));
        entity.setOrgName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAdvertiseDelayTime(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Config entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Config entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Config entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
